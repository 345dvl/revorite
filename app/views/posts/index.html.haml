= render "shared/top-header"

.main
  .main-menu-outer
    .main-menu-inner
      .profile
        - if user_signed_in?
          .profile-image
            - if current_user.image.attached? 
              = link_to(url_for(current_user.image)) do
                = image_tag(current_user.image, alt: 'デフォルトアイコン')
            - else
              = image_tag('sample/default_icon.png', alt: 'デフォルトアイコン')
          .profile-name
            = current_user.name
          .profile-postcount
            投稿数
            = @post_count.to_s(:delimited)
          .profile-following
            フォロー
            = current_user.following_count.to_s(:delimited)
          .profile-follower
            フォロワー
            = current_user.followers_count.to_s(:delimited)
          .profile-description
            = simple_format(current_user.description)
          = link_to edit_user_registration_path do
            .profile-config
              %i.far.fa-id-card
              プロフィールの変更
          = link_to new_post_url, "data-turbolinks": false do
            .button-post
              %i.fas.fa-feather-alt
              投稿する
        - else
      
  .main-posts
    - if @posts.empty?
      投稿がまだありません
    - else
      - @posts.each_with_index.reverse_each do |post, i|
        .post
          .post-left
            = link_to('#') do
              - if post.user.image.attached? 
                = image_tag(post.user.image, alt: 'デフォルトアイコン')
              - else
                = image_tag('sample/default_icon.png', alt: 'デフォルトアイコン')
          .post-right
            .post-header
              .post-header__name
                = link_to('#') do
                  = post.user.name
              .post-header__time
                %i.far.fa-clock
                = post.created_at.to_s(:human)
              - if user_signed_in?
                - if post.user_id == current_user.id
                  .post-header__delete
                    = link_to("/posts/#{post.id}", method: :delete, data: {confirm: "投稿を削除してよろしいですか？"}) do
                      %i.fas.fa-trash-alt
            - if post.review.present?
              .post-review
                .post-review-star{id: "star-#{post.review.id}"}
                  :javascript
                    $('#star-#{post.review.id}').raty({
                      size: 36,
                      starOff: '/assets/star/none.png',
                      starOn: "/assets/star/full.png",
                      starHalf: "/assets/star/half.png",
                      score: "#{post.review.rate}",
                      half: true,
                      readOnly: true
                    });
                .post-review-title
                  = post.review.title
                .post-review-price
                  - if post.review.price.present?
                    = "¥ " + post.review.price.to_s(:delimited)
            .post-text
              = simple_format(post.text)
            - if post.images.attached?
              .post-image
                - post.images.each do |image|
                  = image_tag(image)
            - else
            .post-action
              .post-action__comment{id: "post-action__comment-#{post.id}"} 
                %p
                  %i.far.fa-comment-dots
                  = post.comments.length
              .post-action__repost
                = link_to('#') do
                  %i.fas.fa-retweet
                  = post.repost_count
              .post-action__fav#like{ id: post.id }
                = render partial: "likes/like", locals: {post: post}
            .comment-wrapper#comment{ id: post.id}
              - if post.comments.present?
                .post-comment
                  - post.comments.each do |comment|
                    .comment-list
                      .comment-left
                        - if comment.user.image.attached? 
                          = link_to(url_for(comment.user.image)) do
                            = image_tag(comment.user.image, alt: 'デフォルトアイコン')
                        - else
                          = image_tag('sample/default_icon.png', alt: 'デフォルトアイコン')
                      .comment-right
                        .comment-header
                          .comment-header__name
                            = link_to('#') do
                              = comment.user.name
                          .comment-header__time
                            %i.far.fa-clock
                            = comment.created_at.to_s(:human)
                          - if user_signed_in?
                            - if comment.user_id == current_user.id
                              .comment-header__delete
                                = link_to("/posts/#{comment.post_id}/comments/#{comment.id}", method: :delete, data: {confirm: "コメントを削除してよろしいですか？"}) do
                                  %i.fas.fa-trash-alt
                        .comment-text
                          = simple_format(comment.message)
                        - if comment.images.attached?
                          .comment-image
                            - comment.images.each do |image|
                              = image_tag(image)
                        - else
              .comment-write
                - if user_signed_in?
                  .comment-write-left
                    - if current_user.image.attached? 
                      = link_to(url_for(current_user.image)) do
                        = image_tag(current_user.image, alt: 'デフォルトアイコン')
                    - else
                      = image_tag('sample/default_icon.png', alt: 'デフォルトアイコン')
                  .comment-write-right
                    = form_with model: [post, Comment.new], local: true do |f|
                      .comment-write__textarea
                        = f.text_area :message, placeholder: "コメントを入力（300文字以内）", class: "comment-text", id: "comment-text#{post.id}"
                      .comment-write__submit
                        .comment-write__submit-upper
                          .comment-write__submit-upper-left
                            .comment-write__submit--img
                              = f.label :images, for: "#{post.id}-comment-images" do
                                %i.far.fa-image
                                = f.file_field :images, class: "comment-image-files", id: "#{post.id}-comment-images", data: {id: "#comment-images-#{post.id}"}, multiple: true, accept: "image/jpeg, image/png"
                          .comment-write__submit-upper-right
                            .comment-write__submit--count{id: "comment-textcount#{post.id}"}
                              300
                            .comment-write__submit--btn
                              = f.submit "コメント", class: "button-comment", id: "comment-button#{post.id}", disabled: true
                        .comment-write__submit-downer
                          .comment-write__submit-previewimages{id: "previewimages-#{post.id}"}
                - else
                  .comment-write-left
                    = image_tag('sample/default_icon.png', alt: 'デフォルトアイコン')
                  .comment-write-right#not-signed-in
                    = link_to "ログイン", new_user_session_path 
                    すると皆の投稿にコメントすることができます。
                    %br 
                    アカウントが無い方は
                    = link_to "新規登録", new_user_registration_path 
                    、または
                    = link_to "かんたんログイン", new_user_registration_path 
                    （ゲストユーザとしてワンクリックでログイン）してください。
        - if i != 0
          %hr
.footer
  &copy; 2020 Revorite